apiVersion: v1
kind: Service
metadata:
  name: ${POD_NAME}
  labels:
    app: ais
spec:
  type: ClusterIP
  ports:
    - port: ${PORT}
      targetPort: ${PORT}
      protocol: TCP
      name: http
  selector:
    app: ais
    type: ais-target
---  
apiVersion: v1
kind: Pod
metadata:
  name: ${POD_NAME}
  labels:
    app: ais
    type: ais-target
spec:
  containers:
  - name: aisnode
    image: ${AISNODE_IMAGE}
    imagePullPolicy: IfNotPresent
    livenessProbe:
      httpGet:
        path: /v1/health
        port: ${PORT}
        scheme: ${PROTOCOL}
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /v1/health?readiness=true
        port: ${PORT}
        scheme: ${PROTOCOL}
      initialDelaySeconds: 10
      failureThreshold: 5
      periodSeconds: 5
    securityContext:
      # Required for hostport to operate, or implement a full pod security policy
      privileged: true
    env:
      - name: MY_NODE
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: AIS_NODE_ROLE
        value: "target"
      - name: GOOGLE_APPLICATION_CREDENTIALS
        value: /tmp/gcp/creds.json
    volumeMounts:
     - name: aws-credentials
       mountPath: /root/.aws/
     - name: ais-logs
       mountPath: ${AIS_LOG_DIR}
     - name: ais-tls-certs
       mountPath: /var/certs
     - name: gcp-creds
       mountPath: /tmp/gcp
    ports:
      - containerPort: ${PORT}
        protocol: TCP
    command: ["bash","-c"]
    # TODO: fix the workaround of AIS_FS_PATHS
    args:
      - export PORT=${PORT} &&
        export PORT_INTRA_CONTROL=${PORT_INTRA_CONTROL} &&
        export PORT_INTRA_DATA=${PORT_INTRA_DATA} &&
        export AIS_FS_PATHS=${AIS_FS_PATHS} &&
        export AIS_PRIMARY_URL=${AIS_PRIMARY_URL} &&
        export HOSTNAME_LIST=${HOSTNAME_LIST} &&
        export TEST_FSPATH_COUNT=${TEST_FSPATH_COUNT} &&
        export AIS_BACKEND_PROVIDERS="${AIS_BACKEND_PROVIDERS}" &&
        export AIS_CONF_FILE=/etc/ais/ais.json &&
        export AIS_LOCAL_CONF_FILE=/etc/ais/ais_local.json &&
        export STATSD_CONF_FILE="/etc/ais/statsd.conf" &&
        export COLLECTD_CONF_FILE="/etc/ais/collectd.conf" &&
        export INSTANCE=${INSTANCE} &&
        export AIS_LOG_DIR=${AIS_LOG_DIR} &&
        export AIS_USE_HTTPS=${AIS_USE_HTTPS} &&
        export AIS_SKIP_VERIFY_CRT=${AIS_SKIP_VERIFY_CRT} &&
        export AIS_SERVER_CRT=${AIS_SERVER_CRT} &&
        export AIS_SERVER_KEY=${AIS_SERVER_KEY} &&
        source /etc/ais/utils.sh &&
        source /etc/ais/aisnode_config.sh &&
        aisnode -config=/etc/ais/ais.json -local_config=/etc/ais/ais_local.json -role=target;
  volumes:
    - name: aws-credentials
      secret:
        secretName: aws-credentials
        optional: true
    - name: ais-tls-certs
      secret:
        secretName: ais-tls-certs
        optional: true
    - name: ais-logs
      hostPath:
        path: ${AIS_LOG_DIR}/target-${INSTANCE}
        type: DirectoryOrCreate
    - name: gcp-creds
      secret:
        secretName: gcp-creds
        optional: true